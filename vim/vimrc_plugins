" Configuration related to plugins
" --------------------------------
"
" This file should be loaded only if the &loadplugins options is set
" If we start up vim with --noplugins then we get faster startup, but some of
" the commands in this file might error if the plugins aren't loaded.

" vim-addon-local-vimrc plugin
let g:local_vimrc = { 'names': ['local.vim'] }

" Blockle Plugin
let g:blockle_mapping = '<Leader>d'

" NerdTree Plugin
command NT :NERDTreeToggle
command NTF :NERDTreeFind
nnoremap <silent> <Leader>n :NT<cr>

" Use instead of Netrw when doing an edit /foobar
let NERDTreeHijackNetrw=1
" Single click for everything
let NERDTreeMouseMode=1
" Hide javascript files in nerdtree
command Nojs :let NERDTreeIgnore=[".js$"]

" CtrlP plugin
" let g:ctrlp_map = '<Leader>e'
" let g:ctrlp_working_path_mode = 0
" let g:ctrlp_custom_ignore = '\vvendor$|node_modules$|tmp$|\.git$|\.hg$|\.svn$'
" let g:ctrlp_prompt_mappings = {
"   \ 'PrtSelectMove("j")':   ['<c-j>', '<c-n>'],
"   \ 'PrtSelectMove("k")':   ['<c-k>', '<c-p>'],
"   \ 'PrtHistory(-1)':       ['<down>'],
"   \ 'PrtHistory(1)':        ['<up>'],
"   \ 'MarkToOpen()':         ['<c-a>'],
"   \ }
" map <Leader>f :CtrlPCurFile<CR>
" map <Leader>r :CtrlPMRUFiles<CR>
" map <Leader>b :CtrlPBuffer<CR>
" map <Leader>g :CtrlPLine<CR>
" map <Leader>t :CtrlPBufTag<CR>
" map <Leader>T :CtrlPBufTagAll<CR>
" map <Leader>c :CtrlPChange<CR>
" map <Leader>C :CtrlPChangeAll<CR>

" FZF Plugin
nmap <Leader>e :Files<CR>
nmap <Leader>E :GFiles<CR>
nmap <Leader>ff :Files %:h<CR>
nmap <Leader>fb :Buffers<CR>
nmap <Leader>fw :Windows<CR>
nmap <Leader>fg :Lines<CR>
nmap <Leader>ft :BTags<CR>
nmap <Leader>fT :Tags<CR>
nmap gl :BCommits<CR>

let g:fzf_layout = { 'down': '~20%' }

" Customize fzf colors to match your color scheme
" let g:fzf_colors =
" \ { 'fg':      ['fg', 'Normal'],
"   \ 'bg':      ['bg', 'Normal'],
"   \ 'hl':      ['fg', 'Search'],
"   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"   \ 'hl+':     ['fg', 'Statement'],
"   \ 'info':    ['fg', 'PreProc'],
"   \ 'border':  ['fg', 'Ignore'],
"   \ 'prompt':  ['fg', 'Conditional'],
"   \ 'pointer': ['fg', 'Exception'],
"   \ 'marker':  ['fg', 'Keyword'],
"   \ 'spinner': ['fg', 'Label'],
"   \ 'header':  ['fg', 'Comment'] }

" skip AlignMaps default mappings
let g:loaded_AlignMapsPlugin = 1

" Git interaction
nmap <Leader>ts :!tig status<CR><CR>
nmap <Leader>tl :!tig -- %<CR><CR>
nmap gb :Git blame<CR>
nmap gh :Gbrowse<CR>
vmap gh :Gbrowse<CR>

" Gitv browser mode (shows git log for repo)
" nmap gl :Gitv --all<CR>
" Gitv file mode (shows git history for current file)
" nmap gL :Gitv! --all<CR>
" vmap gL :Gitv! --all<CR>

" Jekyll plugin config
let g:jekyll_path = "~/Projects/coderifous.github.com"

" IndentGuides plugin config
let g:indent_guides_guide_size  = 1
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
autocmd VimEnter * IndentGuidesEnable
hi IndentGuidesOdd  guibg=#003540  ctermbg=0
hi IndentGuidesEven guibg=#003540  ctermbg=0

" YankRing plugin config
nmap yr :YRShow<CR>
nmap yc :YRClear<CR>
nmap yp p:YRPop<CR>
nmap yP P:YRPop<CR>
let g:yankring_min_element_length = 2

" tComment
" Disable all of the default mappings
let g:tcommentMapLeader1   = ""
let g:tcommentMapLeader2   = ""
let g:tcommentMapLeaderOp1 = ""
let g:tcommentMapLeaderOp2 = ""
" Create the only ones that matters
noremap <silent> <Leader>c :TComment<cr>

" peep open ********************************************************
" map <unique> <silent> <Leader>f <Plug>PeepOpen

" autocomplpop ***************************************************************
" complete option
"set complete=.,w,b,u,t,k
"let g:AutoComplPop_CompleteOption = '.,w,b,u,t,k'
"set complete=.
let g:AutoComplPop_IgnoreCaseOption = 0
let g:AutoComplPop_BehaviorKeywordLength = -1
let g:AutoComplPop_MappingDriven=1

" AutoClose config
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"'}

" session plugin
let g:session_directory = "~/.vim_sessions"
let g:session_default_to_last = 1
let g:session_autoload = 'no'
let g:session_autosave = 'no'

nmap <F2> :OpenSession<CR>

" Universal Text Linking plugin
" let g:utl_cfg_hdl_scm_http_system = "silent !open -a Choosy '%u#%f'"
let g:utl_cfg_hdl_scm_http_system = "silent !open -a Choosy '%u'"

" Powerline
" Need the monaco font w/ powerline enhancements?
"   http://gist.github.com/1634235
" let g:Powerline_symbols = 'fancy'

" Airline
let g:airline_powerline_fonts = 1
let g:airline_extensions = []

" Colorscheme (with airline related config)

set termguicolors
" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

if system("defaults read -g AppleInterfaceStyle") =~ '^Dark'
  set background=dark
  " let g:airline_theme = 'jellybeans'
  " colorscheme jellybeans
  let g:airline_theme = 'stellarized_dark'
  colorscheme stellarized
else
  set background=light
  let g:airline_theme = 'stellarized_light'
  colorscheme stellarized
endif


" signature plugin
" Not config for the plugin, just coloring for it.
hi! link SignColumn LineNr

" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" tmux/rspec related config
nnoremap <Leader>RF :cgetfile tmp/quickfix \| copen<cr>
let g:TmuxTargetSession = "/tmp/side"
let g:TmuxTargetPane    = "1.0"
let g:TmuxRspecOpts     = "--require ./.rspec/quickfix_formatter --format QuickfixFormatter:tmp/quickfix --require ./.rspec/progress_with_failures --format ProgressWithFailures --colour --loadby mtime --drb"
set errorformat=%f:%l\ %n\ %m

" Ale related config
let g:ale_sign_error = '☠'
let g:ale_sign_warning = '⚡'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
"
" ALE offers an option g:ale_lint_on_save for enabling running the linters when
" files are saved. This option is enabled by default. If you only wish to run
" linters when files are saved, you can turn the other options off.
"
" let g:ale_lint_on_text_changed = 'never'
"
" if you don't want linters to run on opening a file:
" let g:ale_lint_on_enter = 0
"
" If you wish to show Vim windows for the loclist or quickfix items when a file
" contains warnings or errors, g:ale_open_list can be set to 1.
" g:ale_keep_list_window_open can be set to 1 if you wish to keep the window
" open even after errors disappear.
"
" let g:ale_open_list = 1
"
" This can be useful if you are combining ALE with
" some other plugin which sets quickfix errors, etc.
"
" let g:ale_keep_list_window_open = 1

" Because youcompleteme says to do this:
let g:ycm_key_list_select_completion = ['<C-n>', '<C-p>']

" Github Copilot mappings
nmap <Leader>gc :Copilot<CR>
imap <silent><script><expr> <C-]> copilot#Next()
" imap <silent><script><expr> <C-[> copilot#Previous()

let g:copilot_node_command = "~/.nvm/versions/node/v21.6.2/bin/node"
